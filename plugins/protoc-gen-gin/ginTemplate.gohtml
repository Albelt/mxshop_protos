{{$svrName := .ServiceName}}


type {{$svrName}}HttpServer struct {
	server {{$svrName}}Server
	router gin.IRouter
}

func Register{{$svrName}}HttpServer(srv {{$svrName}}Server, r gin.IRouter) {
	s := {{$svrName}}HttpServer{
		server: srv,
		router: r,
	}

	s.RegisterHttpService()
}

{{- range .Methods}}

func (s *{{$svrName}}HttpServer) {{.Name}}(c *gin.Context)  {
	var in {{.Request}}

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": err.Error()})
		return
	}

	out, err := s.server.{{.Name}}(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"msg": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

{{- end}}

func (s *{{$svrName}}HttpServer) RegisterHttpService() {
{{- range .Methods}}
	s.router.Handle("{{.Method}}","{{.Path}}", s.{{.Name}})
{{- end}}
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: albelt/good_srv/svc.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetSubCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubCategoryRequestMultiError, or nil if none found.
func (m *GetSubCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSubCategoryRequestMultiError(errors)
	}

	return nil
}

// GetSubCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetSubCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSubCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubCategoryRequestMultiError) AllErrors() []error { return m }

// GetSubCategoryRequestValidationError is the validation error returned by
// GetSubCategoryRequest.Validate if the designated constraints aren't met.
type GetSubCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubCategoryRequestValidationError) ErrorName() string {
	return "GetSubCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubCategoryRequestValidationError{}

// Validate checks the field values on GetBrandsOfCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBrandsOfCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandsOfCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBrandsOfCategoryRequestMultiError, or nil if none found.
func (m *GetBrandsOfCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandsOfCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return GetBrandsOfCategoryRequestMultiError(errors)
	}

	return nil
}

// GetBrandsOfCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by GetBrandsOfCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type GetBrandsOfCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandsOfCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandsOfCategoryRequestMultiError) AllErrors() []error { return m }

// GetBrandsOfCategoryRequestValidationError is the validation error returned
// by GetBrandsOfCategoryRequest.Validate if the designated constraints aren't met.
type GetBrandsOfCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandsOfCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandsOfCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandsOfCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandsOfCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandsOfCategoryRequestValidationError) ErrorName() string {
	return "GetBrandsOfCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBrandsOfCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandsOfCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandsOfCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandsOfCategoryRequestValidationError{}

// Validate checks the field values on GetBrandsOfCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBrandsOfCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandsOfCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBrandsOfCategoryResponseMultiError, or nil if none found.
func (m *GetBrandsOfCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandsOfCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBrandsOfCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBrandsOfCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBrandsOfCategoryResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetBrands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBrandsOfCategoryResponseValidationError{
						field:  fmt.Sprintf("Brands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBrandsOfCategoryResponseValidationError{
						field:  fmt.Sprintf("Brands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBrandsOfCategoryResponseValidationError{
					field:  fmt.Sprintf("Brands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBrandsOfCategoryResponseMultiError(errors)
	}

	return nil
}

// GetBrandsOfCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by GetBrandsOfCategoryResponse.ValidateAll() if
// the designated constraints aren't met.
type GetBrandsOfCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandsOfCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandsOfCategoryResponseMultiError) AllErrors() []error { return m }

// GetBrandsOfCategoryResponseValidationError is the validation error returned
// by GetBrandsOfCategoryResponse.Validate if the designated constraints
// aren't met.
type GetBrandsOfCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandsOfCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandsOfCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandsOfCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandsOfCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandsOfCategoryResponseValidationError) ErrorName() string {
	return "GetBrandsOfCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBrandsOfCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandsOfCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandsOfCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandsOfCategoryResponseValidationError{}

// Validate checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryRequestMultiError, or nil if none found.
func (m *DeleteCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCategoryRequestMultiError(errors)
	}

	return nil
}

// DeleteCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryRequestMultiError) AllErrors() []error { return m }

// DeleteCategoryRequestValidationError is the validation error returned by
// DeleteCategoryRequest.Validate if the designated constraints aren't met.
type DeleteCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryRequestValidationError) ErrorName() string {
	return "DeleteCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryRequestValidationError{}

// Validate checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryRequestMultiError, or nil if none found.
func (m *UpdateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCategoryRequestValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCategoryRequestMultiError(errors)
	}

	return nil
}

// UpdateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateCategoryRequestValidationError is the validation error returned by
// UpdateCategoryRequest.Validate if the designated constraints aren't met.
type UpdateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryRequestValidationError) ErrorName() string {
	return "UpdateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryRequestValidationError{}

// Validate checks the field values on QueryCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCategoryRequestMultiError, or nil if none found.
func (m *QueryCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return QueryCategoryRequestMultiError(errors)
	}

	return nil
}

// QueryCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by QueryCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCategoryRequestMultiError) AllErrors() []error { return m }

// QueryCategoryRequestValidationError is the validation error returned by
// QueryCategoryRequest.Validate if the designated constraints aren't met.
type QueryCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCategoryRequestValidationError) ErrorName() string {
	return "QueryCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCategoryRequestValidationError{}

// Validate checks the field values on GetAllCategorysListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllCategorysListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllCategorysListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllCategorysListRequestMultiError, or nil if none found.
func (m *GetAllCategorysListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllCategorysListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllCategorysListRequestMultiError(errors)
	}

	return nil
}

// GetAllCategorysListRequestMultiError is an error wrapping multiple
// validation errors returned by GetAllCategorysListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAllCategorysListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllCategorysListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllCategorysListRequestMultiError) AllErrors() []error { return m }

// GetAllCategorysListRequestValidationError is the validation error returned
// by GetAllCategorysListRequest.Validate if the designated constraints aren't met.
type GetAllCategorysListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllCategorysListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllCategorysListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllCategorysListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllCategorysListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllCategorysListRequestValidationError) ErrorName() string {
	return "GetAllCategorysListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllCategorysListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllCategorysListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllCategorysListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllCategorysListRequestValidationError{}

// Validate checks the field values on GetAllCategorysListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllCategorysListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllCategorysListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllCategorysListResponseMultiError, or nil if none found.
func (m *GetAllCategorysListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllCategorysListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllCategorysListResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllCategorysListResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllCategorysListResponseValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllCategorysListResponseMultiError(errors)
	}

	return nil
}

// GetAllCategorysListResponseMultiError is an error wrapping multiple
// validation errors returned by GetAllCategorysListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAllCategorysListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllCategorysListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllCategorysListResponseMultiError) AllErrors() []error { return m }

// GetAllCategorysListResponseValidationError is the validation error returned
// by GetAllCategorysListResponse.Validate if the designated constraints
// aren't met.
type GetAllCategorysListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllCategorysListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllCategorysListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllCategorysListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllCategorysListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllCategorysListResponseValidationError) ErrorName() string {
	return "GetAllCategorysListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllCategorysListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllCategorysListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllCategorysListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllCategorysListResponseValidationError{}

// Validate checks the field values on GetSubCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubCategoryResponseMultiError, or nil if none found.
func (m *GetSubCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSubCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSubCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSubCategoryResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSubCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubCategoryResponseValidationError{
						field:  fmt.Sprintf("SubCategories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubCategoryResponseValidationError{
						field:  fmt.Sprintf("SubCategories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubCategoryResponseValidationError{
					field:  fmt.Sprintf("SubCategories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSubCategoryResponseMultiError(errors)
	}

	return nil
}

// GetSubCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by GetSubCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSubCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubCategoryResponseMultiError) AllErrors() []error { return m }

// GetSubCategoryResponseValidationError is the validation error returned by
// GetSubCategoryResponse.Validate if the designated constraints aren't met.
type GetSubCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubCategoryResponseValidationError) ErrorName() string {
	return "GetSubCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubCategoryResponseValidationError{}

// Validate checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryRequestMultiError, or nil if none found.
func (m *CreateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCategoryRequestValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryRequestMultiError) AllErrors() []error { return m }

// CreateCategoryRequestValidationError is the validation error returned by
// CreateCategoryRequest.Validate if the designated constraints aren't met.
type CreateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryRequestValidationError) ErrorName() string {
	return "CreateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryRequestValidationError{}

// Validate checks the field values on CategoryBrandListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryBrandListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryBrandListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryBrandListRequestMultiError, or nil if none found.
func (m *CategoryBrandListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryBrandListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Count

	if len(errors) > 0 {
		return CategoryBrandListRequestMultiError(errors)
	}

	return nil
}

// CategoryBrandListRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryBrandListRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryBrandListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryBrandListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryBrandListRequestMultiError) AllErrors() []error { return m }

// CategoryBrandListRequestValidationError is the validation error returned by
// CategoryBrandListRequest.Validate if the designated constraints aren't met.
type CategoryBrandListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryBrandListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryBrandListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryBrandListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryBrandListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryBrandListRequestValidationError) ErrorName() string {
	return "CategoryBrandListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryBrandListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryBrandListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryBrandListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryBrandListRequestValidationError{}

// Validate checks the field values on FilterRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterRequestMultiError, or
// nil if none found.
func (m *FilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pages

	// no validation rules for PagePerNums

	if len(errors) > 0 {
		return FilterRequestMultiError(errors)
	}

	return nil
}

// FilterRequestMultiError is an error wrapping multiple validation errors
// returned by FilterRequest.ValidateAll() if the designated constraints
// aren't met.
type FilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterRequestMultiError) AllErrors() []error { return m }

// FilterRequestValidationError is the validation error returned by
// FilterRequest.Validate if the designated constraints aren't met.
type FilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterRequestValidationError) ErrorName() string { return "FilterRequestValidationError" }

// Error satisfies the builtin error interface
func (e FilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterRequestValidationError{}

// Validate checks the field values on CreateCategoryBrandRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryBrandRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryBrandRequestMultiError, or nil if none found.
func (m *CreateCategoryBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategoryBrand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCategoryBrandRequestValidationError{
					field:  "CategoryBrand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCategoryBrandRequestValidationError{
					field:  "CategoryBrand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategoryBrand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCategoryBrandRequestValidationError{
				field:  "CategoryBrand",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCategoryBrandRequestMultiError(errors)
	}

	return nil
}

// CreateCategoryBrandRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCategoryBrandRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateCategoryBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryBrandRequestMultiError) AllErrors() []error { return m }

// CreateCategoryBrandRequestValidationError is the validation error returned
// by CreateCategoryBrandRequest.Validate if the designated constraints aren't met.
type CreateCategoryBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryBrandRequestValidationError) ErrorName() string {
	return "CreateCategoryBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryBrandRequestValidationError{}

// Validate checks the field values on DeleteCategoryBrandRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryBrandRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryBrandRequestMultiError, or nil if none found.
func (m *DeleteCategoryBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCategoryBrandRequestMultiError(errors)
	}

	return nil
}

// DeleteCategoryBrandRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCategoryBrandRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteCategoryBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryBrandRequestMultiError) AllErrors() []error { return m }

// DeleteCategoryBrandRequestValidationError is the validation error returned
// by DeleteCategoryBrandRequest.Validate if the designated constraints aren't met.
type DeleteCategoryBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryBrandRequestValidationError) ErrorName() string {
	return "DeleteCategoryBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryBrandRequestValidationError{}

// Validate checks the field values on CreateBannerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBannerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBannerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBannerRequestMultiError, or nil if none found.
func (m *CreateBannerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBannerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBanner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBannerRequestValidationError{
					field:  "Banner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBannerRequestValidationError{
					field:  "Banner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBanner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBannerRequestValidationError{
				field:  "Banner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBannerRequestMultiError(errors)
	}

	return nil
}

// CreateBannerRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBannerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBannerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBannerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBannerRequestMultiError) AllErrors() []error { return m }

// CreateBannerRequestValidationError is the validation error returned by
// CreateBannerRequest.Validate if the designated constraints aren't met.
type CreateBannerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBannerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBannerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBannerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBannerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBannerRequestValidationError) ErrorName() string {
	return "CreateBannerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBannerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBannerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBannerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBannerRequestValidationError{}

// Validate checks the field values on DeleteBannerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBannerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBannerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBannerRequestMultiError, or nil if none found.
func (m *DeleteBannerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBannerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBannerRequestMultiError(errors)
	}

	return nil
}

// DeleteBannerRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBannerRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBannerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBannerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBannerRequestMultiError) AllErrors() []error { return m }

// DeleteBannerRequestValidationError is the validation error returned by
// DeleteBannerRequest.Validate if the designated constraints aren't met.
type DeleteBannerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBannerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBannerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBannerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBannerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBannerRequestValidationError) ErrorName() string {
	return "DeleteBannerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBannerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBannerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBannerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBannerRequestValidationError{}

// Validate checks the field values on UpdateBannerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBannerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBannerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBannerRequestMultiError, or nil if none found.
func (m *UpdateBannerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBannerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBanner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBannerRequestValidationError{
					field:  "Banner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBannerRequestValidationError{
					field:  "Banner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBanner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBannerRequestValidationError{
				field:  "Banner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBannerRequestMultiError(errors)
	}

	return nil
}

// UpdateBannerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBannerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBannerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBannerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBannerRequestMultiError) AllErrors() []error { return m }

// UpdateBannerRequestValidationError is the validation error returned by
// UpdateBannerRequest.Validate if the designated constraints aren't met.
type UpdateBannerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBannerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBannerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBannerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBannerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBannerRequestValidationError) ErrorName() string {
	return "UpdateBannerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBannerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBannerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBannerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBannerRequestValidationError{}

// Validate checks the field values on BrandListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BrandListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BrandListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BrandListRequestMultiError, or nil if none found.
func (m *BrandListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BrandListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Count

	if len(errors) > 0 {
		return BrandListRequestMultiError(errors)
	}

	return nil
}

// BrandListRequestMultiError is an error wrapping multiple validation errors
// returned by BrandListRequest.ValidateAll() if the designated constraints
// aren't met.
type BrandListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrandListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrandListRequestMultiError) AllErrors() []error { return m }

// BrandListRequestValidationError is the validation error returned by
// BrandListRequest.Validate if the designated constraints aren't met.
type BrandListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrandListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrandListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrandListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrandListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrandListRequestValidationError) ErrorName() string { return "BrandListRequestValidationError" }

// Error satisfies the builtin error interface
func (e BrandListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrandListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrandListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrandListRequestValidationError{}

// Validate checks the field values on CreateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBrandRequestMultiError, or nil if none found.
func (m *CreateBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBrand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBrandRequestValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBrandRequestValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBrand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBrandRequestValidationError{
				field:  "Brand",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBrandRequestMultiError(errors)
	}

	return nil
}

// CreateBrandRequestMultiError is an error wrapping multiple validation errors
// returned by CreateBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBrandRequestMultiError) AllErrors() []error { return m }

// CreateBrandRequestValidationError is the validation error returned by
// CreateBrandRequest.Validate if the designated constraints aren't met.
type CreateBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBrandRequestValidationError) ErrorName() string {
	return "CreateBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBrandRequestValidationError{}

// Validate checks the field values on DeleteBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBrandRequestMultiError, or nil if none found.
func (m *DeleteBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BrandId

	if len(errors) > 0 {
		return DeleteBrandRequestMultiError(errors)
	}

	return nil
}

// DeleteBrandRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBrandRequestMultiError) AllErrors() []error { return m }

// DeleteBrandRequestValidationError is the validation error returned by
// DeleteBrandRequest.Validate if the designated constraints aren't met.
type DeleteBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBrandRequestValidationError) ErrorName() string {
	return "DeleteBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBrandRequestValidationError{}

// Validate checks the field values on UpdateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBrandRequestMultiError, or nil if none found.
func (m *UpdateBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBrand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBrandRequestValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBrandRequestValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBrand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBrandRequestValidationError{
				field:  "Brand",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBrandRequestMultiError(errors)
	}

	return nil
}

// UpdateBrandRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBrandRequestMultiError) AllErrors() []error { return m }

// UpdateBrandRequestValidationError is the validation error returned by
// UpdateBrandRequest.Validate if the designated constraints aren't met.
type UpdateBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBrandRequestValidationError) ErrorName() string {
	return "UpdateBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBrandRequestValidationError{}

// Validate checks the field values on BrandListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BrandListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BrandListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BrandListResponseMultiError, or nil if none found.
func (m *BrandListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BrandListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetBrands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BrandListResponseValidationError{
						field:  fmt.Sprintf("Brands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BrandListResponseValidationError{
						field:  fmt.Sprintf("Brands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BrandListResponseValidationError{
					field:  fmt.Sprintf("Brands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BrandListResponseMultiError(errors)
	}

	return nil
}

// BrandListResponseMultiError is an error wrapping multiple validation errors
// returned by BrandListResponse.ValidateAll() if the designated constraints
// aren't met.
type BrandListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrandListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrandListResponseMultiError) AllErrors() []error { return m }

// BrandListResponseValidationError is the validation error returned by
// BrandListResponse.Validate if the designated constraints aren't met.
type BrandListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrandListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrandListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrandListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrandListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrandListResponseValidationError) ErrorName() string {
	return "BrandListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BrandListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrandListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrandListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrandListResponseValidationError{}

// Validate checks the field values on BannerListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BannerListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BannerListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BannerListRequestMultiError, or nil if none found.
func (m *BannerListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BannerListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BannerListRequestMultiError(errors)
	}

	return nil
}

// BannerListRequestMultiError is an error wrapping multiple validation errors
// returned by BannerListRequest.ValidateAll() if the designated constraints
// aren't met.
type BannerListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BannerListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BannerListRequestMultiError) AllErrors() []error { return m }

// BannerListRequestValidationError is the validation error returned by
// BannerListRequest.Validate if the designated constraints aren't met.
type BannerListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BannerListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BannerListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BannerListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BannerListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BannerListRequestValidationError) ErrorName() string {
	return "BannerListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BannerListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBannerListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BannerListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BannerListRequestValidationError{}

// Validate checks the field values on BannerListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BannerListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BannerListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BannerListResponseMultiError, or nil if none found.
func (m *BannerListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BannerListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetBanners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BannerListResponseValidationError{
						field:  fmt.Sprintf("Banners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BannerListResponseValidationError{
						field:  fmt.Sprintf("Banners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BannerListResponseValidationError{
					field:  fmt.Sprintf("Banners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BannerListResponseMultiError(errors)
	}

	return nil
}

// BannerListResponseMultiError is an error wrapping multiple validation errors
// returned by BannerListResponse.ValidateAll() if the designated constraints
// aren't met.
type BannerListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BannerListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BannerListResponseMultiError) AllErrors() []error { return m }

// BannerListResponseValidationError is the validation error returned by
// BannerListResponse.Validate if the designated constraints aren't met.
type BannerListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BannerListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BannerListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BannerListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BannerListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BannerListResponseValidationError) ErrorName() string {
	return "BannerListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BannerListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBannerListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BannerListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BannerListResponseValidationError{}

// Validate checks the field values on CategoryBrandListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryBrandListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryBrandListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryBrandListResponseMultiError, or nil if none found.
func (m *CategoryBrandListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryBrandListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetCategoryBrands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryBrandListResponseValidationError{
						field:  fmt.Sprintf("CategoryBrands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryBrandListResponseValidationError{
						field:  fmt.Sprintf("CategoryBrands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryBrandListResponseValidationError{
					field:  fmt.Sprintf("CategoryBrands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryBrandListResponseMultiError(errors)
	}

	return nil
}

// CategoryBrandListResponseMultiError is an error wrapping multiple validation
// errors returned by CategoryBrandListResponse.ValidateAll() if the
// designated constraints aren't met.
type CategoryBrandListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryBrandListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryBrandListResponseMultiError) AllErrors() []error { return m }

// CategoryBrandListResponseValidationError is the validation error returned by
// CategoryBrandListResponse.Validate if the designated constraints aren't met.
type CategoryBrandListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryBrandListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryBrandListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryBrandListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryBrandListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryBrandListResponseValidationError) ErrorName() string {
	return "CategoryBrandListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryBrandListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryBrandListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryBrandListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryBrandListResponseValidationError{}

// Validate checks the field values on BatchGetGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchGetGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchGetGoodsRequestMultiError, or nil if none found.
func (m *BatchGetGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchGetGoodsRequestMultiError(errors)
	}

	return nil
}

// BatchGetGoodsRequestMultiError is an error wrapping multiple validation
// errors returned by BatchGetGoodsRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchGetGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetGoodsRequestMultiError) AllErrors() []error { return m }

// BatchGetGoodsRequestValidationError is the validation error returned by
// BatchGetGoodsRequest.Validate if the designated constraints aren't met.
type BatchGetGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetGoodsRequestValidationError) ErrorName() string {
	return "BatchGetGoodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetGoodsRequestValidationError{}

// Validate checks the field values on DeleteGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGoodsRequestMultiError, or nil if none found.
func (m *DeleteGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteGoodsRequestMultiError(errors)
	}

	return nil
}

// DeleteGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGoodsRequestMultiError) AllErrors() []error { return m }

// DeleteGoodsRequestValidationError is the validation error returned by
// DeleteGoodsRequest.Validate if the designated constraints aren't met.
type DeleteGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGoodsRequestValidationError) ErrorName() string {
	return "DeleteGoodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGoodsRequestValidationError{}

// Validate checks the field values on CategoryFilterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryFilterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryFilterRequestMultiError, or nil if none found.
func (m *CategoryFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IsTab

	if len(errors) > 0 {
		return CategoryFilterRequestMultiError(errors)
	}

	return nil
}

// CategoryFilterRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryFilterRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryFilterRequestMultiError) AllErrors() []error { return m }

// CategoryFilterRequestValidationError is the validation error returned by
// CategoryFilterRequest.Validate if the designated constraints aren't met.
type CategoryFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryFilterRequestValidationError) ErrorName() string {
	return "CategoryFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryFilterRequestValidationError{}

// Validate checks the field values on GetGoodsDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGoodsDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGoodsDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGoodsDetailRequestMultiError, or nil if none found.
func (m *GetGoodsDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGoodsDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetGoodsDetailRequestMultiError(errors)
	}

	return nil
}

// GetGoodsDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetGoodsDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGoodsDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGoodsDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGoodsDetailRequestMultiError) AllErrors() []error { return m }

// GetGoodsDetailRequestValidationError is the validation error returned by
// GetGoodsDetailRequest.Validate if the designated constraints aren't met.
type GetGoodsDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGoodsDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGoodsDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGoodsDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGoodsDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGoodsDetailRequestValidationError) ErrorName() string {
	return "GetGoodsDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGoodsDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGoodsDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGoodsDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGoodsDetailRequestValidationError{}

// Validate checks the field values on CreateGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGoodsRequestMultiError, or nil if none found.
func (m *CreateGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGood()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGoodsRequestValidationError{
					field:  "Good",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGoodsRequestValidationError{
					field:  "Good",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGood()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGoodsRequestValidationError{
				field:  "Good",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGoodsRequestMultiError(errors)
	}

	return nil
}

// CreateGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGoodsRequestMultiError) AllErrors() []error { return m }

// CreateGoodsRequestValidationError is the validation error returned by
// CreateGoodsRequest.Validate if the designated constraints aren't met.
type CreateGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGoodsRequestValidationError) ErrorName() string {
	return "CreateGoodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGoodsRequestValidationError{}

// Validate checks the field values on UpdateGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGoodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGoodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGoodsRequestMultiError, or nil if none found.
func (m *UpdateGoodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGoodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGood()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGoodsRequestValidationError{
					field:  "Good",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGoodsRequestValidationError{
					field:  "Good",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGood()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGoodsRequestValidationError{
				field:  "Good",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGoodsRequestMultiError(errors)
	}

	return nil
}

// UpdateGoodsRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGoodsRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGoodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGoodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGoodsRequestMultiError) AllErrors() []error { return m }

// UpdateGoodsRequestValidationError is the validation error returned by
// UpdateGoodsRequest.Validate if the designated constraints aren't met.
type UpdateGoodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGoodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGoodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGoodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGoodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGoodsRequestValidationError) ErrorName() string {
	return "UpdateGoodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGoodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGoodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGoodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGoodsRequestValidationError{}

// Validate checks the field values on BatchCategoryInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCategoryInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCategoryInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCategoryInfoRequestMultiError, or nil if none found.
func (m *BatchCategoryInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCategoryInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GoodsNums

	// no validation rules for BrandNums

	if len(errors) > 0 {
		return BatchCategoryInfoRequestMultiError(errors)
	}

	return nil
}

// BatchCategoryInfoRequestMultiError is an error wrapping multiple validation
// errors returned by BatchCategoryInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchCategoryInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCategoryInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCategoryInfoRequestMultiError) AllErrors() []error { return m }

// BatchCategoryInfoRequestValidationError is the validation error returned by
// BatchCategoryInfoRequest.Validate if the designated constraints aren't met.
type BatchCategoryInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCategoryInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCategoryInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCategoryInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCategoryInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCategoryInfoRequestValidationError) ErrorName() string {
	return "BatchCategoryInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCategoryInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCategoryInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCategoryInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCategoryInfoRequestValidationError{}

// Validate checks the field values on GoodsListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GoodsListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoodsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoodsListRequestMultiError, or nil if none found.
func (m *GoodsListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GoodsListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PriceMin

	// no validation rules for PriceMax

	// no validation rules for IsHot

	// no validation rules for IsNew

	// no validation rules for IsTab

	// no validation rules for CategoryId

	// no validation rules for Keywords

	// no validation rules for Brand

	// no validation rules for Page

	// no validation rules for Count

	if len(errors) > 0 {
		return GoodsListRequestMultiError(errors)
	}

	return nil
}

// GoodsListRequestMultiError is an error wrapping multiple validation errors
// returned by GoodsListRequest.ValidateAll() if the designated constraints
// aren't met.
type GoodsListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoodsListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoodsListRequestMultiError) AllErrors() []error { return m }

// GoodsListRequestValidationError is the validation error returned by
// GoodsListRequest.Validate if the designated constraints aren't met.
type GoodsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoodsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoodsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoodsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoodsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoodsListRequestValidationError) ErrorName() string { return "GoodsListRequestValidationError" }

// Error satisfies the builtin error interface
func (e GoodsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoodsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoodsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoodsListRequestValidationError{}

// Validate checks the field values on GoodsListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GoodsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoodsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoodsListResponseMultiError, or nil if none found.
func (m *GoodsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GoodsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetGoods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GoodsListResponseValidationError{
						field:  fmt.Sprintf("Goods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GoodsListResponseValidationError{
						field:  fmt.Sprintf("Goods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GoodsListResponseValidationError{
					field:  fmt.Sprintf("Goods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GoodsListResponseMultiError(errors)
	}

	return nil
}

// GoodsListResponseMultiError is an error wrapping multiple validation errors
// returned by GoodsListResponse.ValidateAll() if the designated constraints
// aren't met.
type GoodsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoodsListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoodsListResponseMultiError) AllErrors() []error { return m }

// GoodsListResponseValidationError is the validation error returned by
// GoodsListResponse.Validate if the designated constraints aren't met.
type GoodsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoodsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoodsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoodsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoodsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoodsListResponseValidationError) ErrorName() string {
	return "GoodsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GoodsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoodsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoodsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoodsListResponseValidationError{}

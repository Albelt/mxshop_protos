// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: albelt/stock_srv/svc.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SetStockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStockRequestMultiError, or nil if none found.
func (m *SetStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetStockRequestValidationError{
					field:  "Stock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetStockRequestValidationError{
					field:  "Stock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetStockRequestValidationError{
				field:  "Stock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetStockRequestMultiError(errors)
	}

	return nil
}

// SetStockRequestMultiError is an error wrapping multiple validation errors
// returned by SetStockRequest.ValidateAll() if the designated constraints
// aren't met.
type SetStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStockRequestMultiError) AllErrors() []error { return m }

// SetStockRequestValidationError is the validation error returned by
// SetStockRequest.Validate if the designated constraints aren't met.
type SetStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStockRequestValidationError) ErrorName() string { return "SetStockRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStockRequestValidationError{}

// Validate checks the field values on SetStockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetStockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStockResponseMultiError, or nil if none found.
func (m *SetStockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetStockResponseValidationError{
					field:  "Stock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetStockResponseValidationError{
					field:  "Stock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetStockResponseValidationError{
				field:  "Stock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetStockResponseMultiError(errors)
	}

	return nil
}

// SetStockResponseMultiError is an error wrapping multiple validation errors
// returned by SetStockResponse.ValidateAll() if the designated constraints
// aren't met.
type SetStockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStockResponseMultiError) AllErrors() []error { return m }

// SetStockResponseValidationError is the validation error returned by
// SetStockResponse.Validate if the designated constraints aren't met.
type SetStockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStockResponseValidationError) ErrorName() string { return "SetStockResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetStockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStockResponseValidationError{}

// Validate checks the field values on GetStockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStockRequestMultiError, or nil if none found.
func (m *GetStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GoodsId

	if len(errors) > 0 {
		return GetStockRequestMultiError(errors)
	}

	return nil
}

// GetStockRequestMultiError is an error wrapping multiple validation errors
// returned by GetStockRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStockRequestMultiError) AllErrors() []error { return m }

// GetStockRequestValidationError is the validation error returned by
// GetStockRequest.Validate if the designated constraints aren't met.
type GetStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStockRequestValidationError) ErrorName() string { return "GetStockRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStockRequestValidationError{}

// Validate checks the field values on GetStockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStockResponseMultiError, or nil if none found.
func (m *GetStockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStockResponseValidationError{
					field:  "Stock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStockResponseValidationError{
					field:  "Stock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStockResponseValidationError{
				field:  "Stock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStockResponseMultiError(errors)
	}

	return nil
}

// GetStockResponseMultiError is an error wrapping multiple validation errors
// returned by GetStockResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStockResponseMultiError) AllErrors() []error { return m }

// GetStockResponseValidationError is the validation error returned by
// GetStockResponse.Validate if the designated constraints aren't met.
type GetStockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStockResponseValidationError) ErrorName() string { return "GetStockResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetStockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStockResponseValidationError{}

// Validate checks the field values on DecreseStocksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DecreseStocksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecreseStocksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecreseStocksRequestMultiError, or nil if none found.
func (m *DecreseStocksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DecreseStocksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderSn

	for idx, item := range m.GetStocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DecreseStocksRequestValidationError{
						field:  fmt.Sprintf("Stocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DecreseStocksRequestValidationError{
						field:  fmt.Sprintf("Stocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DecreseStocksRequestValidationError{
					field:  fmt.Sprintf("Stocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DecreseStocksRequestMultiError(errors)
	}

	return nil
}

// DecreseStocksRequestMultiError is an error wrapping multiple validation
// errors returned by DecreseStocksRequest.ValidateAll() if the designated
// constraints aren't met.
type DecreseStocksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecreseStocksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecreseStocksRequestMultiError) AllErrors() []error { return m }

// DecreseStocksRequestValidationError is the validation error returned by
// DecreseStocksRequest.Validate if the designated constraints aren't met.
type DecreseStocksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecreseStocksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecreseStocksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecreseStocksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecreseStocksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecreseStocksRequestValidationError) ErrorName() string {
	return "DecreseStocksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DecreseStocksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecreseStocksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecreseStocksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecreseStocksRequestValidationError{}

// Validate checks the field values on DecreseStocksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DecreseStocksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecreseStocksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecreseStocksResponseMultiError, or nil if none found.
func (m *DecreseStocksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DecreseStocksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DecreseStocksResponseMultiError(errors)
	}

	return nil
}

// DecreseStocksResponseMultiError is an error wrapping multiple validation
// errors returned by DecreseStocksResponse.ValidateAll() if the designated
// constraints aren't met.
type DecreseStocksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecreseStocksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecreseStocksResponseMultiError) AllErrors() []error { return m }

// DecreseStocksResponseValidationError is the validation error returned by
// DecreseStocksResponse.Validate if the designated constraints aren't met.
type DecreseStocksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecreseStocksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecreseStocksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecreseStocksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecreseStocksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecreseStocksResponseValidationError) ErrorName() string {
	return "DecreseStocksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DecreseStocksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecreseStocksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecreseStocksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecreseStocksResponseValidationError{}

// Validate checks the field values on IncreaseStocksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncreaseStocksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncreaseStocksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncreaseStocksRequestMultiError, or nil if none found.
func (m *IncreaseStocksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IncreaseStocksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderSn

	for idx, item := range m.GetStocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IncreaseStocksRequestValidationError{
						field:  fmt.Sprintf("Stocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IncreaseStocksRequestValidationError{
						field:  fmt.Sprintf("Stocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IncreaseStocksRequestValidationError{
					field:  fmt.Sprintf("Stocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IncreaseStocksRequestMultiError(errors)
	}

	return nil
}

// IncreaseStocksRequestMultiError is an error wrapping multiple validation
// errors returned by IncreaseStocksRequest.ValidateAll() if the designated
// constraints aren't met.
type IncreaseStocksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncreaseStocksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncreaseStocksRequestMultiError) AllErrors() []error { return m }

// IncreaseStocksRequestValidationError is the validation error returned by
// IncreaseStocksRequest.Validate if the designated constraints aren't met.
type IncreaseStocksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncreaseStocksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncreaseStocksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncreaseStocksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncreaseStocksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncreaseStocksRequestValidationError) ErrorName() string {
	return "IncreaseStocksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IncreaseStocksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncreaseStocksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncreaseStocksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncreaseStocksRequestValidationError{}

// Validate checks the field values on IncreaseStocksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncreaseStocksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncreaseStocksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncreaseStocksResponseMultiError, or nil if none found.
func (m *IncreaseStocksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IncreaseStocksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IncreaseStocksResponseMultiError(errors)
	}

	return nil
}

// IncreaseStocksResponseMultiError is an error wrapping multiple validation
// errors returned by IncreaseStocksResponse.ValidateAll() if the designated
// constraints aren't met.
type IncreaseStocksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncreaseStocksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncreaseStocksResponseMultiError) AllErrors() []error { return m }

// IncreaseStocksResponseValidationError is the validation error returned by
// IncreaseStocksResponse.Validate if the designated constraints aren't met.
type IncreaseStocksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncreaseStocksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncreaseStocksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncreaseStocksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncreaseStocksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncreaseStocksResponseValidationError) ErrorName() string {
	return "IncreaseStocksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IncreaseStocksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncreaseStocksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncreaseStocksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncreaseStocksResponseValidationError{}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc1
// source: albelt/stock_srv/svc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StockService_SetStock_FullMethodName       = "/stock_srv.StockService/SetStock"
	StockService_GetStock_FullMethodName       = "/stock_srv.StockService/GetStock"
	StockService_DecreseStocks_FullMethodName  = "/stock_srv.StockService/DecreseStocks"
	StockService_IncreaseStocks_FullMethodName = "/stock_srv.StockService/IncreaseStocks"
)

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceClient interface {
	// 设置库存
	SetStock(ctx context.Context, in *SetStockRequest, opts ...grpc.CallOption) (*SetStockResponse, error)
	// 获取货物的库存信息
	GetStock(ctx context.Context, in *GetStockRequest, opts ...grpc.CallOption) (*GetStockResponse, error)
	// 扣减库存
	DecreseStocks(ctx context.Context, in *DecreseStocksRequest, opts ...grpc.CallOption) (*DecreseStocksResponse, error)
	// 归还库存
	IncreaseStocks(ctx context.Context, in *IncreaseStocksRequest, opts ...grpc.CallOption) (*IncreaseStocksResponse, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) SetStock(ctx context.Context, in *SetStockRequest, opts ...grpc.CallOption) (*SetStockResponse, error) {
	out := new(SetStockResponse)
	err := c.cc.Invoke(ctx, StockService_SetStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) GetStock(ctx context.Context, in *GetStockRequest, opts ...grpc.CallOption) (*GetStockResponse, error) {
	out := new(GetStockResponse)
	err := c.cc.Invoke(ctx, StockService_GetStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) DecreseStocks(ctx context.Context, in *DecreseStocksRequest, opts ...grpc.CallOption) (*DecreseStocksResponse, error) {
	out := new(DecreseStocksResponse)
	err := c.cc.Invoke(ctx, StockService_DecreseStocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) IncreaseStocks(ctx context.Context, in *IncreaseStocksRequest, opts ...grpc.CallOption) (*IncreaseStocksResponse, error) {
	out := new(IncreaseStocksResponse)
	err := c.cc.Invoke(ctx, StockService_IncreaseStocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility
type StockServiceServer interface {
	// 设置库存
	SetStock(context.Context, *SetStockRequest) (*SetStockResponse, error)
	// 获取货物的库存信息
	GetStock(context.Context, *GetStockRequest) (*GetStockResponse, error)
	// 扣减库存
	DecreseStocks(context.Context, *DecreseStocksRequest) (*DecreseStocksResponse, error)
	// 归还库存
	IncreaseStocks(context.Context, *IncreaseStocksRequest) (*IncreaseStocksResponse, error)
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockServiceServer struct {
}

func (UnimplementedStockServiceServer) SetStock(context.Context, *SetStockRequest) (*SetStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStock not implemented")
}
func (UnimplementedStockServiceServer) GetStock(context.Context, *GetStockRequest) (*GetStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStock not implemented")
}
func (UnimplementedStockServiceServer) DecreseStocks(context.Context, *DecreseStocksRequest) (*DecreseStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreseStocks not implemented")
}
func (UnimplementedStockServiceServer) IncreaseStocks(context.Context, *IncreaseStocksRequest) (*IncreaseStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseStocks not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	s.RegisterService(&StockService_ServiceDesc, srv)
}

func _StockService_SetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).SetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_SetStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).SetStock(ctx, req.(*SetStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_GetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_GetStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetStock(ctx, req.(*GetStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_DecreseStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecreseStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).DecreseStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_DecreseStocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).DecreseStocks(ctx, req.(*DecreseStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_IncreaseStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).IncreaseStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_IncreaseStocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).IncreaseStocks(ctx, req.(*IncreaseStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockService_ServiceDesc is the grpc.ServiceDesc for StockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock_srv.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStock",
			Handler:    _StockService_SetStock_Handler,
		},
		{
			MethodName: "GetStock",
			Handler:    _StockService_GetStock_Handler,
		},
		{
			MethodName: "DecreseStocks",
			Handler:    _StockService_DecreseStocks_Handler,
		},
		{
			MethodName: "IncreaseStocks",
			Handler:    _StockService_IncreaseStocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "albelt/stock_srv/svc.proto",
}

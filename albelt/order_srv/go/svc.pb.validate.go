// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: albelt/order_srv/svc.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserCartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCartRequestMultiError, or nil if none found.
func (m *GetUserCartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserCartRequestMultiError(errors)
	}

	return nil
}

// GetUserCartRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserCartRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserCartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCartRequestMultiError) AllErrors() []error { return m }

// GetUserCartRequestValidationError is the validation error returned by
// GetUserCartRequest.Validate if the designated constraints aren't met.
type GetUserCartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCartRequestValidationError) ErrorName() string {
	return "GetUserCartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCartRequestValidationError{}

// Validate checks the field values on GetUserCartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCartResponseMultiError, or nil if none found.
func (m *GetUserCartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalItem

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserCartResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserCartResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserCartResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserCartResponseMultiError(errors)
	}

	return nil
}

// GetUserCartResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserCartResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserCartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCartResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCartResponseMultiError) AllErrors() []error { return m }

// GetUserCartResponseValidationError is the validation error returned by
// GetUserCartResponse.Validate if the designated constraints aren't met.
type GetUserCartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCartResponseValidationError) ErrorName() string {
	return "GetUserCartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCartResponseValidationError{}

// Validate checks the field values on AddItemToCartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddItemToCartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddItemToCartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddItemToCartRequestMultiError, or nil if none found.
func (m *AddItemToCartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddItemToCartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddItemToCartRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddItemToCartRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddItemToCartRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddItemToCartRequestMultiError(errors)
	}

	return nil
}

// AddItemToCartRequestMultiError is an error wrapping multiple validation
// errors returned by AddItemToCartRequest.ValidateAll() if the designated
// constraints aren't met.
type AddItemToCartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddItemToCartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddItemToCartRequestMultiError) AllErrors() []error { return m }

// AddItemToCartRequestValidationError is the validation error returned by
// AddItemToCartRequest.Validate if the designated constraints aren't met.
type AddItemToCartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddItemToCartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddItemToCartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddItemToCartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddItemToCartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddItemToCartRequestValidationError) ErrorName() string {
	return "AddItemToCartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddItemToCartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddItemToCartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddItemToCartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddItemToCartRequestValidationError{}

// Validate checks the field values on AddItemToCartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddItemToCartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddItemToCartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddItemToCartResponseMultiError, or nil if none found.
func (m *AddItemToCartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddItemToCartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddItemToCartResponseMultiError(errors)
	}

	return nil
}

// AddItemToCartResponseMultiError is an error wrapping multiple validation
// errors returned by AddItemToCartResponse.ValidateAll() if the designated
// constraints aren't met.
type AddItemToCartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddItemToCartResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddItemToCartResponseMultiError) AllErrors() []error { return m }

// AddItemToCartResponseValidationError is the validation error returned by
// AddItemToCartResponse.Validate if the designated constraints aren't met.
type AddItemToCartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddItemToCartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddItemToCartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddItemToCartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddItemToCartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddItemToCartResponseValidationError) ErrorName() string {
	return "AddItemToCartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddItemToCartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddItemToCartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddItemToCartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddItemToCartResponseValidationError{}

// Validate checks the field values on RemoveItemFromCartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveItemFromCartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveItemFromCartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveItemFromCartRequestMultiError, or nil if none found.
func (m *RemoveItemFromCartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveItemFromCartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for GoodsId

	if len(errors) > 0 {
		return RemoveItemFromCartRequestMultiError(errors)
	}

	return nil
}

// RemoveItemFromCartRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveItemFromCartRequest.ValidateAll() if the
// designated constraints aren't met.
type RemoveItemFromCartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveItemFromCartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveItemFromCartRequestMultiError) AllErrors() []error { return m }

// RemoveItemFromCartRequestValidationError is the validation error returned by
// RemoveItemFromCartRequest.Validate if the designated constraints aren't met.
type RemoveItemFromCartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveItemFromCartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveItemFromCartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveItemFromCartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveItemFromCartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveItemFromCartRequestValidationError) ErrorName() string {
	return "RemoveItemFromCartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveItemFromCartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveItemFromCartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveItemFromCartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveItemFromCartRequestValidationError{}

// Validate checks the field values on RemoveItemFromCartResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveItemFromCartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveItemFromCartResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveItemFromCartResponseMultiError, or nil if none found.
func (m *RemoveItemFromCartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveItemFromCartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveItemFromCartResponseMultiError(errors)
	}

	return nil
}

// RemoveItemFromCartResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveItemFromCartResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveItemFromCartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveItemFromCartResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveItemFromCartResponseMultiError) AllErrors() []error { return m }

// RemoveItemFromCartResponseValidationError is the validation error returned
// by RemoveItemFromCartResponse.Validate if the designated constraints aren't met.
type RemoveItemFromCartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveItemFromCartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveItemFromCartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveItemFromCartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveItemFromCartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveItemFromCartResponseValidationError) ErrorName() string {
	return "RemoveItemFromCartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveItemFromCartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveItemFromCartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveItemFromCartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveItemFromCartResponseValidationError{}

// Validate checks the field values on CreateOrderFromCartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderFromCartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderFromCartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderFromCartRequestMultiError, or nil if none found.
func (m *CreateOrderFromCartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderFromCartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderFromCartRequestValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderFromCartRequestValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderFromCartRequestValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrderFromCartRequestMultiError(errors)
	}

	return nil
}

// CreateOrderFromCartRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrderFromCartRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOrderFromCartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderFromCartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderFromCartRequestMultiError) AllErrors() []error { return m }

// CreateOrderFromCartRequestValidationError is the validation error returned
// by CreateOrderFromCartRequest.Validate if the designated constraints aren't met.
type CreateOrderFromCartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderFromCartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderFromCartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderFromCartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderFromCartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderFromCartRequestValidationError) ErrorName() string {
	return "CreateOrderFromCartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderFromCartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderFromCartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderFromCartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderFromCartRequestValidationError{}

// Validate checks the field values on CreateOrderFromCartResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderFromCartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderFromCartResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderFromCartResponseMultiError, or nil if none found.
func (m *CreateOrderFromCartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderFromCartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderFromCartResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderFromCartResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderFromCartResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrderFromCartResponseMultiError(errors)
	}

	return nil
}

// CreateOrderFromCartResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrderFromCartResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrderFromCartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderFromCartResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderFromCartResponseMultiError) AllErrors() []error { return m }

// CreateOrderFromCartResponseValidationError is the validation error returned
// by CreateOrderFromCartResponse.Validate if the designated constraints
// aren't met.
type CreateOrderFromCartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderFromCartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderFromCartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderFromCartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderFromCartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderFromCartResponseValidationError) ErrorName() string {
	return "CreateOrderFromCartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderFromCartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderFromCartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderFromCartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderFromCartResponseValidationError{}

// Validate checks the field values on GetOrderDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderDetailRequestMultiError, or nil if none found.
func (m *GetOrderDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return GetOrderDetailRequestMultiError(errors)
	}

	return nil
}

// GetOrderDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderDetailRequestMultiError) AllErrors() []error { return m }

// GetOrderDetailRequestValidationError is the validation error returned by
// GetOrderDetailRequest.Validate if the designated constraints aren't met.
type GetOrderDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderDetailRequestValidationError) ErrorName() string {
	return "GetOrderDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderDetailRequestValidationError{}

// Validate checks the field values on GetOrderDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderDetailResponseMultiError, or nil if none found.
func (m *GetOrderDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderDetailResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderDetailResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderDetailResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderDetailResponseMultiError(errors)
	}

	return nil
}

// GetOrderDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrderDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrderDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderDetailResponseMultiError) AllErrors() []error { return m }

// GetOrderDetailResponseValidationError is the validation error returned by
// GetOrderDetailResponse.Validate if the designated constraints aren't met.
type GetOrderDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderDetailResponseValidationError) ErrorName() string {
	return "GetOrderDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderDetailResponseValidationError{}

// Validate checks the field values on UpdateOrderStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderStatusRequestMultiError, or nil if none found.
func (m *UpdateOrderStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for OrderNo

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateOrderStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateOrderStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderStatusRequestMultiError) AllErrors() []error { return m }

// UpdateOrderStatusRequestValidationError is the validation error returned by
// UpdateOrderStatusRequest.Validate if the designated constraints aren't met.
type UpdateOrderStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderStatusRequestValidationError) ErrorName() string {
	return "UpdateOrderStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderStatusRequestValidationError{}

// Validate checks the field values on UpdateOrderStatusResponce with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderStatusResponce) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderStatusResponce with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderStatusResponceMultiError, or nil if none found.
func (m *UpdateOrderStatusResponce) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderStatusResponce) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOrderStatusResponceMultiError(errors)
	}

	return nil
}

// UpdateOrderStatusResponceMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderStatusResponce.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrderStatusResponceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderStatusResponceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderStatusResponceMultiError) AllErrors() []error { return m }

// UpdateOrderStatusResponceValidationError is the validation error returned by
// UpdateOrderStatusResponce.Validate if the designated constraints aren't met.
type UpdateOrderStatusResponceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderStatusResponceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderStatusResponceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderStatusResponceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderStatusResponceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderStatusResponceValidationError) ErrorName() string {
	return "UpdateOrderStatusResponceValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderStatusResponceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderStatusResponce.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderStatusResponceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderStatusResponceValidationError{}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: albelt/order_srv/msg.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ShoppingCartItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShoppingCartItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShoppingCartItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShoppingCartItemMultiError, or nil if none found.
func (m *ShoppingCartItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ShoppingCartItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for GoodsId

	// no validation rules for Num

	// no validation rules for Checked

	if len(errors) > 0 {
		return ShoppingCartItemMultiError(errors)
	}

	return nil
}

// ShoppingCartItemMultiError is an error wrapping multiple validation errors
// returned by ShoppingCartItem.ValidateAll() if the designated constraints
// aren't met.
type ShoppingCartItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShoppingCartItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShoppingCartItemMultiError) AllErrors() []error { return m }

// ShoppingCartItemValidationError is the validation error returned by
// ShoppingCartItem.Validate if the designated constraints aren't met.
type ShoppingCartItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShoppingCartItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShoppingCartItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShoppingCartItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShoppingCartItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShoppingCartItemValidationError) ErrorName() string { return "ShoppingCartItemValidationError" }

// Error satisfies the builtin error interface
func (e ShoppingCartItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShoppingCartItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShoppingCartItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShoppingCartItemValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for No

	// no validation rules for PayType

	// no validation rules for Status

	// no validation rules for TradeNo

	// no validation rules for Amount

	if all {
		switch v := interface{}(m.GetPayTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "PayTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "PayTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "PayTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for UserMobile

	// no validation rules for UserAddress

	for idx, item := range m.GetGoodss() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  fmt.Sprintf("Goodss[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  fmt.Sprintf("Goodss[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderValidationError{
					field:  fmt.Sprintf("Goodss[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on OrderGoods with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderGoods) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderGoods with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderGoodsMultiError, or
// nil if none found.
func (m *OrderGoods) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderGoods) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrderId

	// no validation rules for GoodsId

	// no validation rules for GoodsNum

	// no validation rules for GoodsName

	// no validation rules for GoodsPrice

	if len(errors) > 0 {
		return OrderGoodsMultiError(errors)
	}

	return nil
}

// OrderGoodsMultiError is an error wrapping multiple validation errors
// returned by OrderGoods.ValidateAll() if the designated constraints aren't met.
type OrderGoodsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderGoodsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderGoodsMultiError) AllErrors() []error { return m }

// OrderGoodsValidationError is the validation error returned by
// OrderGoods.Validate if the designated constraints aren't met.
type OrderGoodsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderGoodsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderGoodsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderGoodsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderGoodsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderGoodsValidationError) ErrorName() string { return "OrderGoodsValidationError" }

// Error satisfies the builtin error interface
func (e OrderGoodsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderGoods.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderGoodsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderGoodsValidationError{}
